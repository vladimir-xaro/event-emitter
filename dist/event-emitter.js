var EventEmitter=function(){"use strict";return class{constructor(e={}){this.events={};for(let t in e)e[t]&&this.subscribe(t,e[t])}subscribe(e,t){this.has(e)||(this.events[e]=[]);let s=[];if(Array.isArray(t))for(const r of t)s.push(...this.subscribe(e,r));else this.events[e].push(t),s.push((()=>this.removeListener(e,t)));return s}unsubscribe(...e){for(const t of e)this.events[t]&&delete this.events[t]}removeListener(e,t){if(Array.isArray(this.events[e])){const s=this.events[e].indexOf(t);s>-1&&this.events[e].splice(s,1)}}once(e,t){const s=this.subscribe(e,(()=>{s[0](),Array.isArray(t)?t.forEach((e=>e())):t()}))}has(e){return!!this.events[e]}listenerCount(e){return!!this.events.hasOwnProperty(e)&&this.events[e].length}emit(e,...t){const s=this.events[e];if(s)for(let e of s)e(...t)}validateEmit(e,...t){const s=this.events[e];if(!s)return!1;for(const e of s)if(!e(...t))return!1;return!0}seriesEmit(e,...t){const s=this.events[e];if(!s)return;let r;for(let e=0;e<s.length;e++)r=0===e?s[e](...t):s[e](r);return r}}}();
//# sourceMappingURL=event-emitter.js.map
