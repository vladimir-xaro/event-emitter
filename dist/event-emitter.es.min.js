export default class{constructor(e={}){this.events={};for(let s in e)e[s]&&this.subscribe(s,e[s])}subscribe(e,s){this.has(e)||(this.events[e]=[]);let t=[];if(Array.isArray(s))for(const r of s)t.push(...this.subscribe(e,r));else this.events[e].push(s),t.push((()=>this.removeListener(e,s)));return t}unsubscribe(...e){for(const s of e)this.events[s]&&delete this.events[s]}removeListener(e,s){if(Array.isArray(this.events[e])){const t=this.events[e].indexOf(s);t>-1&&this.events[e].splice(t,1)}}once(e,s){const t=this.subscribe(e,(()=>{t[0](),Array.isArray(s)?s.forEach((e=>e())):s()}))}has(e){return!!this.events[e]}listenerCount(e){return!!this.events.hasOwnProperty(e)&&this.events[e].length}emit(e,...s){const t=this.events[e];if(t)for(let e of t)e(...s)}validateEmit(e,...s){const t=this.events[e];if(!t)return!1;for(const e of t)if(!e(...s))return!1;return!0}seriesEmit(e,...s){const t=this.events[e];if(!t)return;let r;for(let e=0;e<t.length;e++)r=0===e?t[e](...s):t[e](r);return r}}
//# sourceMappingURL=event-emitter.es.min.js.map
